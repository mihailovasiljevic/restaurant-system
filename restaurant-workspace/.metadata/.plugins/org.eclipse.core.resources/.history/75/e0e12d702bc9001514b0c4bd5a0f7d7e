package restaurant.server.entity;

import static javax.persistence.CascadeType.ALL;
import static javax.persistence.FetchType.LAZY;
import static javax.persistence.GenerationType.IDENTITY;

import java.io.Serializable;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;

@Entity
@Table(name = "RESTAURANT_GUEST")
public class RestaurantGuest implements Serializable{

	private static final long serialVersionUID = -97243651610451388L;

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "REST_GUEST_ID", unique = true, nullable = false)
	private Integer id;
	
	@Column(name = "REST_GUEST_NAME", nullable = false, length=64)
	private String name;
	
	@Column(name = "REST_GUEST_SURNAME", nullable = false, length = 64)
	private String surname;
	
	@Column(name = "REST_GUEST_EMAIL", nullable = false, length = 80)
	private String email;
	
	@Column(name = "REST_GUEST_PASS", nullable = false, length = 256)
	private String password;
	
	@Column(name = "REST_GUEST_ACT", nullable = false)
	private Boolean activated;
	
	@Column(name = "REST_GUEST_VIS_NO", nullable = false)
	private Integer numberOfVisits;
	
	@ManyToOne
	@JoinColumn(name = "ADDRESS_ID", referencedColumnName = "ADDRESS_ID")
	private Address address;
	
	@ManyToOne
	@JoinColumn(name = "REST_ID", referencedColumnName = "REST_ID")
	private Restaurant restaurant;
	
	@OneToOne
	@JoinColumn(name = "IMAGE_ID", referencedColumnName = "IMAGE_ID")
	private Image image;
	
	@OneToMany(cascade = { ALL }, fetch = LAZY, mappedBy = "restaurantGuest") //mappedBy says that owning side is street
	private Set<Friend> myFriends = new HashSet<Friend>();
	
	public void add(Friend friend) {
		if (friend.getRestaurantGuest() != null)
			friend.getRestaurantGuest().getMyFriends().remove(friend);
		friend.setRestaurantGuest(this);
		myFriends.add(friend);
	}

	public void remove(Friend friend) {
		friend.setRestaurantGuest(null);
		myFriends.remove(friend);
	}
	
	@OneToMany(cascade = { ALL }, fetch = LAZY, mappedBy = "restaurantFriend") //mappedBy says that owning side is street
	private Set<Friend> iAmFriendTo = new HashSet<Friend>();
	
	public void add(Friend friend) {
		if (friend.getRestaurantFriend() != null)
			friend.getRestaurantFriend().getIAmFriendTo().remove(friend);
		friend.setRestaurantFriend(this);
		iAmFriendTo.add(friend);
	}

	public void remove(Friend friend) {
		friend.setRestaurantFriend(null);
		iAmFriendTo.remove(friend);
	}
	

}
